
#include "stdafx.h"
#include <string>
#include <algorithm>
#include <iostream>
using namespace std;

void print_res(int a[], int len)
{
	for (int i = 0; i < len; ++i)
		cout << a[i] << " ";
	cout << endl;
}

void bubble_sort(int a[], int len)
{
	bool flag = true;
	for (int i = 0; i < len - 1 && flag; ++i){
		flag = false;
		for (int j = len - 1; j > i; --j){
			if (a[j] < a[j - 1]){
				swap(a[j], a[j - 1]);
				flag = true;
			}
		}
	}
}

void insert_sort(int a[], int len)
{
	for (int i = 1; i < len ; ++i){
		int j = i - 1;
		int tmp = a[i];
		while (j >= 0 && tmp < a[j]){
			a[j + 1] = a[j];
			j--;
		}
		a[j+1] = tmp;
	}
}

void shell_sort(int a[], int n)
 {
      int i,j,gap;
     // gap为步长，每次减为原来的一半。
      for (gap = n / 2; gap > 0; gap /= 2)
      {
          // 共gap个组，对每一组都执行直接插入排序
          for (i = 0 ;i < gap; i++)
          {
              for (j = i + gap; j < n; j += gap) 
              {
                  // 如果a[j] < a[j-gap]，则寻找a[j]位置，并将后面数据的位置都后移。
                  int tmp = a[j];
                  int k = j - gap;
                  while (k >= 0 && a[k] > tmp)
                  {
                      a[k + gap] = a[k];
                      k -= gap;
                  }
                  a[k + gap] = tmp;
              }
          }
      }
}

void select_sort(int a[], int len)
{
	int tmp, pos;
	for (int i = 0; i < len - 1; ++i){
		tmp = a[i];
		pos = i;
		for (int j = i+1; j < len ; ++j){
			if (a[j] < tmp){
				tmp = a[j];
				pos = j;
			}
		}
		a[pos] = a[i];
		a[i] = tmp;
	}
}

void merge(int arr[], int temp_arr[], int start_index, int mid_index, int end_index)
{
	int i = start_index, j = mid_index + 1;
	int k = 0;
	while (i < mid_index + 1 && j < end_index + 1)
	{
		if (arr[i] > arr[j])
			temp_arr[k++] = arr[j++];
		else
			temp_arr[k++] = arr[i++];
	}
	while (i < mid_index + 1)
	{
		temp_arr[k++] = arr[i++];
	}
	while (j < end_index + 1)
		temp_arr[k++] = arr[j++];

	for (i = 0, j = start_index; j < end_index + 1; i++, j++)
		arr[j] = temp_arr[i];
}
void merge_sort(int a[], int tmp[], int low, int high)
{
	if (low < high){
		int mid = (low + high) / 2;
		merge_sort(a, tmp, low, mid);
		merge_sort(a, tmp, mid + 1, high);
		merge(a, tmp, low, mid, high);
	}
}

void quick_sort(int a[], int low, int high)
{
	if (low < high)
	{
		int i = low, j = high, pivotkey = a[low];
		while (i < j)
		{
			while (i < j && a[j] > pivotkey)
				j--;
			if (i < j)
				a[i++] = a[j];

			while (i < j && a[i] < pivotkey)
				i++;
			if (i < j)
				a[j--] = a[i];
		}
		a[i] = pivotkey;
		quick_sort(a, low, i - 1);
		quick_sort(a, i + 1, high);
	}
}

/**
* 将数组arr构建大根堆
* @param arr 待调整的数组
* @param i   待调整的数组元素的下标
* @param len 数组的长度
*/
void heap_adjust(int arr[], int i, int len)
{
	int child;
	int temp;

	for (; 2 * i + 1 < len; i = child)
	{
		child = 2 * i + 1;  // 子结点的位置 = 2 * 父结点的位置 + 1
		// 得到子结点中键值较大的结点
		if (child < len - 1 && arr[child + 1] > arr[child])
			child++;
		// 如果较大的子结点大于父结点那么把较大的子结点往上移动，替换它的父结点
		if (arr[i] < arr[child])
		{
			temp = arr[i];
			arr[i] = arr[child];
			arr[child] = temp;
		}
		else
			break;
	}
}
/**
* 堆排序算法
*/
void heap_sort(int arr[], int len)
{
	int i;
	// 调整序列的前半部分元素，调整完之后第一个元素是序列的最大的元素
	for (int i = len / 2 - 1; i >= 0; i--)
	{
		heap_adjust(arr, i, len);
	}

	for (i = len - 1; i > 0; i--)
	{
		// 将第1个元素与当前最后一个元素交换，保证当前的最后一个位置的元素都是现在的这个序列中最大的
		int temp = arr[0];
		arr[0] = arr[i];
		arr[i] = temp;
		// 不断缩小调整heap的范围，每一次调整完毕保证第一个元素是当前序列的最大值
		heap_adjust(arr, 0, i);
	}
}

int _tmain(int argc, _TCHAR* argv[])
{
	cout << "******冒泡排序******" << endl;
	int a[9] = { 4, 3, 5, 7, 8, 1, 6, 9, 2 };
	bubble_sort(a, 9);
	print_res(a, 9);
	cout << endl;

	cout << "******插入排序******" << endl;
	int b[9] = { 4, 3, 5, 7, 8, 1, 6, 9, 2 };
	insert_sort(b, 9);
	print_res(b, 9);
	cout << endl;

	cout << "******希尔排序******" << endl;
	int c[9] = { 4, 3, 5, 7, 8, 1, 6, 9, 2 };
	shell_sort(c, 9);
	print_res(c, 9);
	cout << endl;

	cout << "******选择排序******" << endl;
	int d[9] = { 4, 3, 5, 7, 8, 1, 6, 9, 2 };
	select_sort(d, 9);
	print_res(d, 9);
	cout << endl;

	cout << "******归并排序******" << endl;
	int e[9] = { 4, 3, 5, 7, 8, 1, 6, 9, 2 };
	int tmp[9];
	merge_sort(e, tmp, 0, 8);
	print_res(e, 9);
	cout << endl;

	cout << "******快速排序******" << endl;
	int g[9] = { 4, 3, 5, 7, 8, 1, 6, 9, 2 };
	quick_sort(g, 0, 8);
	print_res(g, 9);
	cout << endl;

	cout << "******堆排序******" << endl;
	int f[9] = { 4, 3, 5, 7, 8, 1, 6, 9, 2 };
	heap_sort(f, 9);
	print_res(f, 9);
	cout << endl;
	return 0;
}

