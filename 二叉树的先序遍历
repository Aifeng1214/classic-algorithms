先序遍历的结点访问顺序：根→左→右
/***************递归遍历***************/
void PreOrder(TreeNode* root)
{
    if(!root) return;
	  cout<<root->data;
	  PreOrder(root->lchild);
	  PreOrder(root->rchild);
}


/***************非递归遍历***************/
 根据前序遍历访问的顺序，优先访问根结点，然后再分别访问左孩子和右孩子。即对于任一结点，其可看做是根结点，因此可以直接访问；访问完之后
 若其左孩子不为空，按相同规则访问它的左子树；当访问其左子树时，再访问它的右子树。因此其处理过程如下：
 对于任一结点P：
1)访问结点P，并将结点P入栈;
2)判断结点P的左孩子是否为空，若为空，则取栈顶结点并进行出栈操作，并将栈顶结点的右孩子置为当前的结点P，循环至1);
  若不为空，则将P的左孩子置为当前的结点P;
3)直到P为NULL并且栈为空，则遍历结束。
void PreOrder(TreeNode* root)
{
    if(!root) return;
    stack<TreeNode*> stk;
    TreeNode* cur=root;
    while(cur!=NULL || !stk.empty())
    {
        while(cur){
            cout<<cur->data; //输出根节点
            stk.push(cur);   //保存路径
            cur=cur->lchild; //一直找到根节点的最左子节点并分别输出，cur指向最左子节点的左子树(NULL)
        }
        if(!stk.empty()){                                                         
            cur=stk.top();
            stk.pop();
            cur=cur->rchild;
        }
    }
}
