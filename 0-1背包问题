记dp[i][j]表示背包容量为j的条件下，前i件物品所能获得的最大价值。
于是有了状态转移方程：
           0                                                  i=0或j=0;
dp[i][j]=  dp[i-1][j]                                         j<weight[i]
           max(dp[i-1][j] , dp[i-1][j-weight[i]]+value[i])    i>0并且j>=weight[i]
           

借助一道笔试题：
Problem Description:
小Q在国外上学，业余时间兼职代购补贴学费。假定她每周向国内寄回一个包裹，包裹的重量上限是m，小Q的利润是包裹价值的10%。
现在小Q有n件物品准备寄出，每件物品的重量和价值不等，小Q想知道这个包裹最多能获得多少利润？
输入
第一行数据是两个正整数，分别表示包裹的重量上限m和物品的总数n
第二行数据是n个正整数，表示第一件，第二件...第n件物品的重量
第三行数据是n个正整数，表示第一件，第二件...第n件物品的价值
输出
为1个实数，保留小数点后一位，表示小Q在这个包裹上能赚到的利润。

样例输入
10 5
2 2 6 5 4
6 3 5 4 6
样例输出
1.5

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
int main(int argc, char * argv[])
{
	int m, n;
	while (cin >> m >> n)
	{
		vector<int>weight(n+1,0);
		vector<int>value(n+1,0);
		for (int i = 1; i <= n; ++i){
			int weit;
			cin >> weit;
			weight[i] = weit;
		}
		for (int i = 1; i <= n; ++i){
			int val;
			cin >> val;
			value[i] = val;
		}
		vector<vector<int>>dp(n+1, vector<int>(m+1,0));
		for (int i = 1; i <= n; ++i){
			for (int j = 1; j <= m; ++j){
				if (j < weight[i])
					dp[i][j] = dp[i - 1][j];
				else
					dp[i][j] = dp[i - 1][j]>dp[i - 1][j - weight[i]] + value[i] ? dp[i - 1][j] : dp[i - 1][j - weight[i]] + value[i];
			}
		}
		cout << dp[n][m] << endl;
	}
	return 0;
}
